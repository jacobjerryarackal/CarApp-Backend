services:
  backend:
    build:
      context: . # Path to your Node.js backend directory
      dockerfile: Dockerfile
    ports:
      - "${PORT}:${PORT}" # Map container port to the host
    depends_on:
      - redis
      - postgres
    volumes:
      - .:/app # Mount local directory into the container
    networks:
      - car-app
    environment:
      - DATABASE_URL=${DATABASE_URL}

  apollo-server:
    image: node:20-alpine # Use Node.js 20 for Apollo Server
    working_dir: /app
    volumes:
      - .:/app # Mount local directory into the container
    command: npm start # Adjust based on your Apollo Server start script
    ports:
      - "4000:${PORT}" # Expose Apollo Server on port 4000
    depends_on:
      - postgres
    networks:
      - car-app
    environment:
      - APP_URL=${APP_URL}

  redis:
    image: redis:latest
    ports:
      - "6379:6379" # Map container port to the host
    networks:
      - car-app

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432" # Map container port to the host
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist PostgreSQL data
    networks:
      - car-app

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8081:80" # Map container port to the host
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    networks:
      - car-app

  minio:
    hostname: minio
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_STORAGE_USE_HTTPS: "${MINIO_STORAGE_USE_HTTPS}"
    command: server --console-address ":9001" /data
    expose:
      - "9000"
      - "9001"
      - "44531"
    ports:
      - "${MINIO_PORT}:9000"
      - "9001:9001"
    volumes:
      - "./minio/data:/data"
    networks:
      - car-app

volumes:
  postgres_data: # Define a volume to persist PostgreSQL data

networks:
  car-app:
    driver: bridge
    name: car-app-network
